from .Keyboards import (cities_kb, confirmation_kb, categories_kb, questions,
                        operator_kb, reply_kb)
from .Config import (bot, States, user_questions, categories_ru_en,
                     user_operator_state, operators_messages, reasons_list)
from .DB import get_full_name, get_phone
from .Phrases import get_questions, get_answer
import re

reason_text = '–£–∫–∞–∂–∏—Ç–µ, –ø–æ –∫–∞–∫–æ–π –ø—Ä–∏—á–∏–Ω–µ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞?'.lower()
operator_text = '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥, –Ω–∞–∂–º–∏—Ç–µ \"–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥\" –≤–Ω–∏–∑—É.\n\n‚ö†Ô∏è–í–Ω–∏–º–∞–Ω–∏–µ‚ö†Ô∏è: –ï—Å–ª–∏ –í—ã –≤–µ—Ä–Ω–µ—Ç–µ—Å—å –Ω–∞–∑–∞–¥, –í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–Ω–æ–≤–∞ –∑–∞–π–¥–∏—Ç–µ –≤ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª.'
operator_text_auto = '–ü–µ—Ä–µ–≤–æ–∂—É –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —É–∂–µ —Å–ø–µ—à–∏—Ç –∫ –í–∞–º –Ω–∞ –ø–æ–º–æ—â—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.'


async def date(chat_id, state):
    text = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∏ –∫–æ–Ω–µ—á–Ω—ã–π —Å—Ä–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç—É—é. –ù–∞–ø—Ä–∏–º–µ—Ä: 2024-01-01, 2024-12-31.'
    await bot.send_message(chat_id, text)
    await state.set_state(States.date)


async def full_name(chat_id, state):
    text = ("–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –∞–≤—Ç–æ—à–∫–æ–ª—É –Ø–≥—É–∞—Äüöò\n"
        "–í–∞–º —É –Ω–∞—Å —Ç–æ—á–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è‚≠êÔ∏è\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –§–ò–û")
    await bot.send_message(chat_id, text)
    await state.set_state(States.full_name)


async def phone(chat_id, state):
    text = "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7–•–•–•–•–•–•–•–•–•–•"
    await bot.send_message(chat_id, text)
    await state.set_state(States.phone)


async def city(chat_id, state):
    text = "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –í—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ?"
    await bot.send_message(chat_id, text, reply_markup=cities_kb)
    await state.set_state(States.cities)


async def confirmation(chat_id, state, town):
    fn = await get_full_name(chat_id)
    phone_num = await get_phone(chat_id)
    text = (f"–í–∞—à–µ –§–ò–û: {fn}\n"
            f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_num}\n"
            f"–í–∞—à –≥–æ—Ä–æ–¥: {town}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–æ—Å—Ç–æ–≤–µ—Ä—å—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–≥–∏–æ–Ω. –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ "
            "–≤—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ, –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏ –º—ã –Ω–µ —Å–º–æ–∂–µ–º –æ–∫–∞–∑—ã–≤–∞—Ç—å "
            "–í–∞–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è.")
    await bot.send_message(chat_id, text, reply_markup=confirmation_kb)
    await state.set_state(States.confirmation)


async def categories(chat_id, state, repeat=False):
    fn = await get_full_name(chat_id)
    if repeat:
        text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, –∫–æ—Ç–æ—Ä–æ–≥–æ –∫–∞—Å–∞–µ—Ç—Å—è –í–∞—à –≤–æ–ø—Ä–æ—Å:"
    else:
        text = f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {fn}! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, –∫–æ—Ç–æ—Ä–æ–≥–æ –∫–∞—Å–∞–µ—Ç—Å—è –í–∞—à –≤–æ–ø—Ä–æ—Å:"
    await bot.send_message(chat_id, text, reply_markup=categories_kb)
    await state.set_state(States.choose_category)


async def category(chat_id, state, name):
    town = user_questions[chat_id][0]
    add_text, num = await get_questions(town, name)
    text = "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ü–∏—Ñ—Ä—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –í–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É:\n\n" + add_text
    kb = await questions(num)
    await bot.send_message(chat_id, text, reply_markup=kb)
    await state.set_state(getattr(States, categories_ru_en[name]))


async def call_operator(chat_id, state, auto=False):
    state_str = await state.get_state()
    current_state = state_str.split(':')[1]

    if current_state in ('medical', 'driving', 'theory', 'internal_exam', 'gibdd_exam', 'payment'):
        current_state = 'category'
    elif current_state == 'choose_category':
        current_state = 'categories'

    necessary_state = f'{current_state}_operator'
    kb = operator_kb

    text = operator_text_auto if auto else operator_text

    await bot.send_message(chat_id, text, reply_markup=kb)
    await state.set_state(getattr(States, necessary_state))

    user_operator_state[chat_id] = True
    await send_missed_messages(chat_id)


async def send_missed_messages(user_id):
    if user_id in operators_messages:
        for message in operators_messages[user_id]:
            await bot.send_message(user_id, f'–ü—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:\n{message}')


async def question_answer(chat_id, state):
    town, category_str, number = user_questions[chat_id]
    text = await get_answer(town, category_str, number)
    if reason_text in text.lower():
        reasons_list_unfiltered = re.findall(r'\d+\)\s*[^.]+', text)
        for i, reason in enumerate(reasons_list_unfiltered, start=1):
            reasons_list.append(reason.replace(f"{i}) ", ""))
        kb = await questions(len(reasons_list), True)
    else:
        kb = reply_kb
    await bot.send_message(chat_id, text, reply_markup=kb)
    await state.set_state(States.rate)
